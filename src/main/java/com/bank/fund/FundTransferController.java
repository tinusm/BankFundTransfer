package com.bank.fund;

import java.io.IOException;
import java.net.URISyntaxException;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.ResponseBody;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;

import com.bank.fund.Fund;
import com.bank.fund.FundRepository;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/fundtransfer") // This means URL's start with
										// /accountsummary (after Application
										// path)

public class FundTransferController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle
				// the data
	private FundRepository accountRepository;

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private TransactionRepository transactionRepository;
	
	@CrossOrigin
	@GetMapping(path = "/all/{id}")
	public @ResponseBody Fund getAccountnumber(@PathVariable Long id)
			throws KeyManagementException, NoSuchAlgorithmException, URISyntaxException, IOException {
		
        System.out.println("xxxxxxxx");
		return accountRepository.findOne(id);
		
		
	}
    
	@CrossOrigin
	@GetMapping(path = "/all/{id}/{amount}/{thirdpartyaccountnumber}")
	@HystrixCommand(fallbackMethod = "getFallbackFundTransfer")
	
	public @ResponseBody List<Fund> fundTransfer(@PathVariable Long id, @PathVariable("amount") Long amount,
			@PathVariable("thirdpartyaccountnumber") Long thirdpartyaccountnumber)
			throws KeyManagementException, NoSuchAlgorithmException, URISyntaxException, IOException {
		System.out.println("FundTransfer Iniated !!!!!");
		Long acc = null;
		Long bal = null;
		Long balanceafterdebit = null;
		Long previousBalance = null;
		Long dummyCurrentBalance = (long) 0;
		Long dummyDebit = (long) 0;
		Long dummyCredit = (long) 0;
        List accounts = new ArrayList<Fund>();
		Fund account = accountRepository.findOne(id);
		if (account.getAccountid() != null) {
			acc = account.getAccountid();
		}
		if (account.getBalance() != null) {
			bal = account.getBalance();
		}

		previousBalance = bal;

		System.out.println("Previous Balance Amount : " + previousBalance);

		System.out.println("Debiting Amount : " + amount);

		if (bal > 0 || bal > amount) {
			balanceafterdebit = bal - amount;

		}

		System.out.println("Balance Amount after debeting : " + balanceafterdebit);

		if (balanceafterdebit != null) {

			account.setBalance(balanceafterdebit);

			accountRepository.save(account);

		}
		Transaction trans = new Transaction();
		trans.setAccountid(account.getAccountid());
		trans.setAccountnumber(account.getAccountnumber());
		trans.setThirdpartyaccountnumber(thirdpartyaccountnumber);
		trans.setPreviousbalance(account.getBalance());
		trans.setCurrentbalance(dummyCurrentBalance);
		trans.setCustomername(account.getCustomername());
		trans.setBranch(account.getBranch());
		trans.setDebit(dummyDebit);
		trans.setCredit(dummyCredit);
		transactionRepository.save(trans);

		if (balanceafterdebit != null && trans != null) {

			trans.setCurrentbalance(balanceafterdebit);
			trans.setPreviousbalance(previousBalance);
			trans.setDebit(amount);

			transactionRepository.save(trans);

			System.out.println("Sucessfully updated in Transaction Table");

			ConnectionFactory factory = new ConnectionFactory();
			factory.setUri("amqp://tcltuzup:lvZGCmC2XfugGMaRKnUe_s5N-wa7FM64@white-swan.rmq.cloudamqp.com/tcltuzup");
			Connection connection = factory.newConnection();
			Channel channel = connection.createChannel();
			channel.queueDeclare("BANK.FUND.TRANSFER", true, false, false, null);
			String message = trans.toString();
			channel.basicPublish("", "BANK.FUND.TRANSFER", null, message.getBytes());
			System.out.println(" [x] Sent '" + message.toString() + "'");

		}
		System.out.println(account.getBranch().toString());
		accounts.add(account);
		return accounts;
	}

	@CrossOrigin
	public @ResponseBody List<Fund> getFallbackFundTransfer(@PathVariable Long id, @PathVariable("amount") Long amount,
			@PathVariable("thirdpartyaccountnumber") Long thirdpartyaccountnumber)
			throws KeyManagementException, NoSuchAlgorithmException, URISyntaxException, IOException {
		List accounts = new ArrayList<Fund>();
		Fund account = accountRepository.findOne(id);
		accounts.add(account.getAccountid());
		accounts.add(account.getAccountnumber());
		accounts.add(account.getBalance());
		accounts.add(account.getBranch());
		accounts.add(account.getCustomername());
		accountRepository.save(accounts);
		//Fund fund = new Fund();
		//return fund;
		
		
		Transaction trans = new Transaction();
		trans.setAccountid(account.getAccountid());
		trans.setAccountnumber(account.getAccountnumber());
		trans.setThirdpartyaccountnumber(thirdpartyaccountnumber);
		trans.setPreviousbalance(account.getBalance());
		trans.setCurrentbalance(account.getBalance());
		trans.setCustomername(account.getCustomername());
		trans.setBranch(account.getBranch());
		trans.setDebit(amount);
		//trans.setCredit();
		transactionRepository.save(trans);
		
		return (List<Fund>) accounts;

	}

}
